import random
b = []
a = []
x = 0
w = 0
def printMatrix(M): # Function to print matrices in a clean format
  for ROW in M:
    print(ROW)
def isMagic(M): # Check if a matrix is magic
    n = len(M)
    magic_sum = sum(M[0])
    for Row in M:
        if sum(Row) != magic_sum:
            return False
    for Col in range(n):
        if sum(M[Row][Col] for Row in range(n)) != magic_sum:
            return False
    if sum(M[T][T] for T in range(n)) != magic_sum:
        return False
    if sum(M[T][n-T-1] for T in range(n)) != magic_sum:
        return False
    return True
def addM(M1, M2): # Add two matrices
  result = []
  for P in range(len(M1)):
      row = []
      for O in range(len(M1[P])):
        row.append(M1[P][O] + M2[P][O])
      result.append(row)
  return result
def make5x5(M, shift): # Create a 5x5 matrix with shifting
    y = len(M)
    B = [] 
    n = []
    Y = []
    s = M
    c = 0
    k = y 
    J = y - shift 
    X = 0
    A = k + J
    z = 0 
    while z < 4 :
      while J < A :
        c = J % k
        B.append(M[c])
        J = J + 1
        n.append(B[X])
        X = X + 1
      Y.append(B)
      M = n
      n = []
      J = y - shift
      z = z + 1
      B = []
      X = 0  
    Y = [s] + Y
    return Y
while x < 1: # creating the 1st matrix
  i = int(input ("Please enter a prime number from 5 to 19: "))
  if i in [5,7,11,13,17,19]: # check if i is a prime number
    j = 0
    while j < i: # create a 1x(i) array
      j = j+1
      b.append(j)
    x = x+1
    random.shuffle(b) # shuffle the numbers in the array
  else :
    print ("The number you entered is not valid. Please try again")
while w < i: # creating the 2nd matrix
  y = w * i
  w = w+1
  a.append(y)
random.shuffle(a) # shuffle the numbers in the array
Z = make5x5(b, 2)
W = make5x5(a, 3)
print("Matrix A:")
printMatrix(Z)
print("Matrix B:")
printMatrix(W)
sum_matrix = addM(Z, W)
print("Sum of A and B:")
printMatrix(sum_matrix)
print("Is A a magic square ?", isMagic(Z))
print("Is B a magic square ?", isMagic(W))
print("Is A+B a magic square ?", isMagic(sum_matrix))
